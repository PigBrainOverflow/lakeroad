#lang errortrace racket
;;; Utilities for .btor files.

(provide parse-btor)

(require rosette)

(define (parse-btor str)

  ;;; Maps ids (number) to bv expressions.
  (define h (make-hash))
  (define (get id)
    (hash-ref h id))
  (define (get-str id-str)
    (get (string->number id-str)))

  (define ins (make-hash))
  (define outs (make-hash))

  (for ([line (filter (lambda (line) (not (equal? #\; (string-ref line 0))))
                      (string-split str #rx"\n+"))])
    (match-let* ;;; Remove comments.
     ([line (first (string-split line ";"))] [(cons id-str tokens) (string-split line)]
                                             [id (string->number id-str)])
     (match tokens
       [`("sort" "bitvec" ,width-str) (hash-set! h id (bitvector (string->number width-str)))]
       ;;; Sometimes the .btor files contain inputs without names. I'm unsure what these are. We just
       ;;; ignore them for now.
       [`("input" ,type-id-str)
        (let* ([type (hash-ref h (string->number type-id-str))]
               [const (constant `(unnamed-input ,id) type)])
          ;;; (displayln (format "Unnamed input found with id ~a and type id ~a" id type-id-str)
          ;;;            (current-error-port))
          (hash-set! h id const))]
       [`("input" ,type-id-str ,name)
        (let* ([type (hash-ref h (string->number type-id-str))]
               [const (constant (string->symbol name) type)])
          (hash-set! ins name const)
          (hash-set! h id const))]
       [`("const" ,type-id-str ,value-str)
        (let* ([type (hash-ref h (string->number type-id-str))] [value (string->number value-str 2)])
          (hash-set! h id (bv value type)))]
       [`("ite" ,type-id-str ,cond-id-str ,true-val-id-str ,false-val-id-str)
        (hash-set! h
                   id
                   (if (bitvector->bool (get-str cond-id-str))
                       (get-str true-val-id-str)
                       (get-str false-val-id-str)))]
       [`("slice" ,type-id-str ,val-id-str ,u-str ,l-str)
        (hash-set! h id (extract (string->number u-str) (string->number l-str) (get-str val-id-str)))]
       [`("output" ,id-str ,name)
        (hash-set! outs name (get-str id-str))
        (hash-set! h id name)]
       [`("uext" ,out-type-id-str ,in-id-str ,_ ...)
        (hash-set! h id (zero-extend (get-str in-id-str) (get-str out-type-id-str)))]
       [`("not" ,out-type-id-str ,in-id-str) (hash-set! h id (bvnot (get-str in-id-str)))]
       [`("eq" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h
                   id
                   (bool->bitvector (bveq (get-str a-id-str) (get-str b-id-str))
                                    (get-str out-type-id-str)))]
       [`("and" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h id (bvand (get-str a-id-str) (get-str b-id-str)))]
       [`("or" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h id (bvor (get-str a-id-str) (get-str b-id-str)))]
       [`("xor" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h id (bvxor (get-str a-id-str) (get-str b-id-str)))]
       [`("concat" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h id (concat (get-str a-id-str) (get-str b-id-str)))]
       [`("srl" ,out-type-id-str ,a-id-str ,b-id-str)
        (hash-set! h id (bvlshr (get-str a-id-str) (get-str b-id-str)))]
       [`("redor" ,out-type-id-str ,in-id-str)
        (hash-set! h id (apply bvor (bitvector->bits (get-str in-id-str))))]
       [`("redand" ,out-type-id-str ,in-id-str)
        (hash-set! h id (apply bvand (bitvector->bits (get-str in-id-str))))])))

  (list ins outs))

(module+ test
  (require rackunit
           rosette/solver/smt/boolector
           "lut.rkt"
           "interpreter.rkt")

  (current-solver (boolector))

  (test-case
   "Parse a LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.15+50 (git sha1 6318db615, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) for module LUT4.
1 sort bitvec 1
2 input 1 A ; myLUT4.v:2.19-2.20
3 input 1 B ; myLUT4.v:2.22-2.23
4 input 1 C ; myLUT4.v:2.25-2.26
5 input 1 D ; myLUT4.v:2.28-2.29
6 sort bitvec 16
7 input 6 INIT ; myLUT4.v:3.17-3.21
8 sort bitvec 8
9 slice 8 7 7 0
10 slice 8 7 15 8
11 ite 8 5 10 9
12 sort bitvec 4
13 slice 12 11 3 0
14 slice 12 11 7 4
15 ite 12 4 14 13
16 sort bitvec 2
17 slice 16 15 1 0
18 slice 16 15 3 2
19 ite 16 3 18 17
20 slice 1 19 0 0
21 slice 1 19 1 1
22 ite 1 2 21 20
23 output 22 Z ; myLUT4.v:2.38-2.39
24 uext 16 19 0 s1 ; myLUT4.v:7.16-7.18
25 uext 12 15 0 s2 ; myLUT4.v:6.16-6.18
26 uext 8 11 0 s3 ; myLUT4.v:5.16-5.18
; end of yosys output
here-string-delimiter
        ;
        ))

     (define A (hash-ref ins "A"))
     (define B (hash-ref ins "B"))
     (define C (hash-ref ins "C"))
     (define D (hash-ref ins "D"))
     (define INIT (hash-ref ins "INIT"))

     ;;; Verify the parsed LUT4 against our implementation of LUT.
     (check-true (unsat? (verify (assert (bveq (hash-ref outs "Z") (lut INIT (concat D C B A)))))))))

  (test-case
   "Parse a LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.19+14 (git sha1 2326b9f90, clang 12.0.0 -fPIC -Os) for module CCU2C.
1 sort bitvec 1
2 input 1 A0 ; myCCU2C.v:17.25-17.27
3 input 1 A1 ; myCCU2C.v:17.41-17.43
4 input 1 B0 ; myCCU2C.v:17.29-17.31
5 input 1 B1 ; myCCU2C.v:17.45-17.47
6 input 1 C0 ; myCCU2C.v:17.33-17.35
7 input 1 C1 ; myCCU2C.v:17.49-17.51
8 input 1 CIN ; myCCU2C.v:17.20-17.23
9 input 1 D0 ; myCCU2C.v:17.37-17.39
10 input 1 D1 ; myCCU2C.v:17.53-17.55
11 sort bitvec 16
12 input 11 INIT0 ; myCCU2C.v:18.46-18.51
13 input 11 INIT1 ; myCCU2C.v:18.66-18.71
14 sort bitvec 64
15 input 14 INJECT1_0 ; myCCU2C.v:18.86-18.95
16 input 14 INJECT1_1 ; myCCU2C.v:18.110-18.119
17 sort bitvec 8
18 slice 17 13 7 0
19 slice 17 13 15 8
20 ite 17 10 19 18
21 sort bitvec 4
22 slice 21 20 3 0
23 slice 21 20 7 4
24 ite 21 7 23 22
25 sort bitvec 2
26 slice 25 24 1 0
27 slice 25 24 3 2
28 ite 25 5 27 26
29 slice 1 28 0 0
30 slice 1 28 1 1
31 ite 1 3 30 29
32 not 1 31
33 slice 25 13 1 0
34 slice 25 13 3 2
35 ite 25 5 34 33
36 slice 1 35 0 0
37 slice 1 35 1 1
38 ite 1 3 37 36
39 const 1 0
40 sort bitvec 24
41 const 40 010110010100010101010011
42 uext 14 41 40
43 eq 1 16 42
44 ite 1 43 39 38
45 and 1 32 44
46 slice 17 12 7 0
47 slice 17 12 15 8
48 ite 17 9 47 46
49 slice 21 48 3 0
50 slice 21 48 7 4
51 ite 21 6 50 49
52 slice 25 51 1 0
53 slice 25 51 3 2
54 ite 25 4 53 52
55 slice 1 54 0 0
56 slice 1 54 1 1
57 ite 1 2 56 55
58 not 1 57
59 slice 25 12 1 0
60 slice 25 12 3 2
61 ite 25 4 60 59
62 slice 1 61 0 0
63 slice 1 61 1 1
64 ite 1 2 63 62
65 uext 14 41 40
66 eq 1 15 65
67 ite 1 66 39 64
68 and 1 58 67
69 and 1 57 8
70 or 1 68 69
71 and 1 31 70
72 or 1 45 71
73 output 72 COUT ; myCCU2C.v:18.28-18.32
74 uext 14 41 40
75 eq 1 15 74
76 ite 1 75 39 8
77 xor 1 57 76
78 output 77 S0 ; myCCU2C.v:18.20-18.22
79 uext 14 41 40
80 eq 1 16 79
81 ite 1 80 39 70
82 xor 1 31 81
83 output 82 S1 ; myCCU2C.v:18.24-18.26
84 uext 1 64 0 LUT2_0 ; myCCU2C.v:26.15-26.21
85 uext 1 38 0 LUT2_1 ; myCCU2C.v:37.15-37.21
86 uext 1 57 0 LUT4_0 ; myCCU2C.v:26.7-26.13
87 uext 1 31 0 LUT4_1 ; myCCU2C.v:37.7-37.13
88 uext 1 70 0 cout_0 ; myCCU2C.v:34.7-34.13
89 uext 1 76 0 gated_cin_0 ; myCCU2C.v:30.7-30.18
90 uext 1 81 0 gated_cin_1 ; myCCU2C.v:41.7-41.18
91 uext 1 67 0 gated_lut2_0 ; myCCU2C.v:33.7-33.19
92 uext 1 44 0 gated_lut2_1 ; myCCU2C.v:44.7-44.19
93 uext 1 2 0 lut2_0.A ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.19-11.20
94 uext 1 4 0 lut2_0.B ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.22-11.23
95 slice 21 12 3 0
96 uext 21 95 0 lut2_0.INIT ; myCCU2C.v:28.9-28.62|myCCU2C.v:12.16-12.20
97 uext 1 64 0 lut2_0.Z ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.32-11.33
98 uext 25 61 0 lut2_0.s1 ; myCCU2C.v:28.9-28.62|myCCU2C.v:14.16-14.18
99 uext 1 3 0 lut2_1.A ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.19-11.20
100 uext 1 5 0 lut2_1.B ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.22-11.23
101 slice 21 13 3 0
102 uext 21 101 0 lut2_1.INIT ; myCCU2C.v:39.9-39.62|myCCU2C.v:12.16-12.20
103 uext 1 38 0 lut2_1.Z ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.32-11.33
104 uext 25 35 0 lut2_1.s1 ; myCCU2C.v:39.9-39.62|myCCU2C.v:14.16-14.18
105 uext 1 2 0 lut4_0.A ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.19-3.20
106 uext 1 4 0 lut4_0.B ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.22-3.23
107 uext 1 6 0 lut4_0.C ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.25-3.26
108 uext 1 9 0 lut4_0.D ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.28-3.29
109 uext 11 12 0 lut4_0.INIT ; myCCU2C.v:27.9-27.73|myCCU2C.v:4.17-4.21
110 uext 1 57 0 lut4_0.Z ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.38-3.39
111 uext 25 54 0 lut4_0.s1 ; myCCU2C.v:27.9-27.73|myCCU2C.v:8.16-8.18
112 uext 21 51 0 lut4_0.s2 ; myCCU2C.v:27.9-27.73|myCCU2C.v:7.16-7.18
113 uext 17 48 0 lut4_0.s3 ; myCCU2C.v:27.9-27.73|myCCU2C.v:6.16-6.18
114 uext 1 3 0 lut4_1.A ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.19-3.20
115 uext 1 5 0 lut4_1.B ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.22-3.23
116 uext 1 7 0 lut4_1.C ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.25-3.26
117 uext 1 10 0 lut4_1.D ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.28-3.29
118 uext 11 13 0 lut4_1.INIT ; myCCU2C.v:38.9-38.73|myCCU2C.v:4.17-4.21
119 uext 1 31 0 lut4_1.Z ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.38-3.39
120 uext 25 28 0 lut4_1.s1 ; myCCU2C.v:38.9-38.73|myCCU2C.v:8.16-8.18
121 uext 21 24 0 lut4_1.s2 ; myCCU2C.v:38.9-38.73|myCCU2C.v:7.16-7.18
122 uext 17 20 0 lut4_1.s3 ; myCCU2C.v:38.9-38.73|myCCU2C.v:6.16-6.18
; end of yosys output
here-string-delimiter
        ;
        ))

     (match-define (hash-table ("S0" S0) ("S1" S1) ("COUT" COUT)) outs)

     (match-define (hash-table ("A0" A0)
                               ("A1" A1)
                               ("B0" B0)
                               ("B1" B1)
                               ("C0" C0)
                               ("C1" C1)
                               ("CIN" CIN)
                               ("D0" D0)
                               ("D1" D1)
                               ("INIT0" INIT0)
                               ("INIT1" INIT1)
                               ("INJECT1_0" INJECT1_0)
                               ("INJECT1_1" INJECT1_1))
       ins)

     (check-equal?
      (unsat)
      (verify (begin

                (assume (bvzero? INJECT1_0))
                (assume (bvzero? INJECT1_1))

                (match-define (list iS0 iS1 iCOUT)
                  (interpret `(lattice-ecp5-ccu2c ,INIT0
                                                  ,INIT1
                                                  ,(bv 0 1)
                                                  ,(bv 0 1)
                                                  ,CIN
                                                  ,(list (concat D0 C0 B0 A0) (concat D1 C1 B1 A1)))))
                (assert (bveq S0 iS0))
                (assert (bveq S1 iS1))
                (assert (bveq COUT iCOUT)))))))

  (test-case
   "Parse a Xilinx LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.15+50 (git sha1 6318db615, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) for module LUT4.
1 sort bitvec 1
2 input 1 I0 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:44.9-44.11
3 input 1 I1 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:45.9-45.11
4 input 1 I2 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:46.9-46.11
5 input 1 I3 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:47.9-47.11
6 sort bitvec 16
7 input 6 INIT ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:48.16-48.20
8 input 1
9 sort bitvec 4
10 input 1
11 slice 9 7 3 0
12 const 1 0
13 sort bitvec 2
14 concat 13 3 12
15 uext 9 14 2
16 srl 9 11 15
17 slice 1 16 0 0
18 const 1 1
19 eq 1 3 18
20 eq 1 3 12
21 or 1 19 20
22 uext 9 14 2
23 srl 9 11 22
24 slice 1 23 0 0
25 concat 13 3 18
26 uext 9 25 2
27 srl 9 11 26
28 slice 1 27 0 0
29 eq 1 24 28
30 and 1 21 29
31 ite 1 30 17 10
32 input 1
33 eq 1 2 18
34 eq 1 2 12
35 or 1 33 34
36 concat 13 12 2
37 uext 9 36 2
38 srl 9 11 37
39 slice 1 38 0 0
40 concat 13 18 2
41 uext 9 40 2
42 srl 9 11 41
43 slice 1 42 0 0
44 eq 1 39 43
45 and 1 35 44
46 ite 1 45 32 31
47 input 1
48 redor 1 11
49 not 1 48
50 redand 1 11
51 or 1 49 50
52 ite 1 51 47 46
53 input 1
54 xor 1 3 2
55 eq 1 54 18
56 xor 1 3 2
57 eq 1 56 12
58 or 1 55 57
59 ite 1 58 53 52
60 input 1
61 redor 1 7
62 not 1 61
63 redand 1 7
64 or 1 62 63
65 ite 1 64 60 59
66 input 1
67 xor 1 2 3
68 xor 1 67 4
69 xor 1 68 5
70 eq 1 69 12
71 xor 1 2 3
72 xor 1 71 4
73 xor 1 72 5
74 eq 1 73 18
75 or 1 70 74
76 ite 1 75 66 65
77 uext 9 36 2
78 srl 9 11 77
79 slice 1 78 0 0
80 ite 1 45 79 76
81 input 1
82 ite 1 51 81 80
83 input 1
84 ite 1 58 83 82
85 input 1
86 ite 1 64 85 84
87 input 1
88 ite 1 75 87 86
89 slice 1 7 0 0
90 ite 1 51 89 88
91 input 1
92 ite 1 58 91 90
93 input 1
94 ite 1 64 93 92
95 input 1
96 ite 1 75 95 94
97 concat 13 3 2
98 uext 9 97 2
99 srl 9 11 98
100 slice 1 99 0 0
101 ite 1 58 100 96
102 input 1
103 ite 1 64 102 101
104 input 1
105 ite 1 75 104 103
106 input 1
107 slice 9 7 7 4
108 uext 9 14 2
109 srl 9 107 108
110 slice 1 109 0 0
111 eq 1 3 18
112 eq 1 3 12
113 or 1 111 112
114 uext 9 14 2
115 srl 9 107 114
116 slice 1 115 0 0
117 uext 9 25 2
118 srl 9 107 117
119 slice 1 118 0 0
120 eq 1 116 119
121 and 1 113 120
122 ite 1 121 110 106
123 input 1
124 eq 1 2 18
125 eq 1 2 12
126 or 1 124 125
127 uext 9 36 2
128 srl 9 107 127
129 slice 1 128 0 0
130 uext 9 40 2
131 srl 9 107 130
132 slice 1 131 0 0
133 eq 1 129 132
134 and 1 126 133
135 ite 1 134 123 122
136 input 1
137 redor 1 107
138 not 1 137
139 redand 1 107
140 or 1 138 139
141 ite 1 140 136 135
142 input 1
143 xor 1 3 2
144 eq 1 143 18
145 xor 1 3 2
146 eq 1 145 12
147 or 1 144 146
148 ite 1 147 142 141
149 input 1
150 ite 1 64 149 148
151 input 1
152 ite 1 75 151 150
153 uext 9 36 2
154 srl 9 107 153
155 slice 1 154 0 0
156 ite 1 134 155 152
157 input 1
158 ite 1 140 157 156
159 input 1
160 ite 1 147 159 158
161 input 1
162 ite 1 64 161 160
163 input 1
164 ite 1 75 163 162
165 slice 1 7 4 4
166 ite 1 140 165 164
167 input 1
168 ite 1 147 167 166
169 input 1
170 ite 1 64 169 168
171 input 1
172 ite 1 75 171 170
173 uext 9 97 2
174 srl 9 107 173
175 slice 1 174 0 0
176 ite 1 147 175 172
177 input 1
178 ite 1 64 177 176
179 input 1
180 ite 1 75 179 178
181 input 1
182 slice 9 7 11 8
183 uext 9 14 2
184 srl 9 182 183
185 slice 1 184 0 0
186 eq 1 3 18
187 eq 1 3 12
188 or 1 186 187
189 uext 9 14 2
190 srl 9 182 189
191 slice 1 190 0 0
192 uext 9 25 2
193 srl 9 182 192
194 slice 1 193 0 0
195 eq 1 191 194
196 and 1 188 195
197 ite 1 196 185 181
198 input 1
199 eq 1 2 18
200 eq 1 2 12
201 or 1 199 200
202 uext 9 36 2
203 srl 9 182 202
204 slice 1 203 0 0
205 uext 9 40 2
206 srl 9 182 205
207 slice 1 206 0 0
208 eq 1 204 207
209 and 1 201 208
210 ite 1 209 198 197
211 input 1
212 redor 1 182
213 not 1 212
214 redand 1 182
215 or 1 213 214
216 ite 1 215 211 210
217 input 1
218 xor 1 3 2
219 eq 1 218 18
220 xor 1 3 2
221 eq 1 220 12
222 or 1 219 221
223 ite 1 222 217 216
224 input 1
225 ite 1 64 224 223
226 input 1
227 ite 1 75 226 225
228 uext 9 36 2
229 srl 9 182 228
230 slice 1 229 0 0
231 ite 1 209 230 227
232 input 1
233 ite 1 215 232 231
234 input 1
235 ite 1 222 234 233
236 input 1
237 ite 1 64 236 235
238 input 1
239 ite 1 75 238 237
240 slice 1 7 8 8
241 ite 1 215 240 239
242 input 1
243 ite 1 222 242 241
244 input 1
245 ite 1 64 244 243
246 input 1
247 ite 1 75 246 245
248 uext 9 97 2
249 srl 9 182 248
250 slice 1 249 0 0
251 ite 1 222 250 247
252 input 1
253 ite 1 64 252 251
254 input 1
255 ite 1 75 254 253
256 input 1
257 slice 9 7 15 12
258 uext 9 14 2
259 srl 9 257 258
260 slice 1 259 0 0
261 eq 1 3 18
262 eq 1 3 12
263 or 1 261 262
264 uext 9 14 2
265 srl 9 257 264
266 slice 1 265 0 0
267 uext 9 25 2
268 srl 9 257 267
269 slice 1 268 0 0
270 eq 1 266 269
271 and 1 263 270
272 ite 1 271 260 256
273 input 1
274 eq 1 2 18
275 eq 1 2 12
276 or 1 274 275
277 uext 9 36 2
278 srl 9 257 277
279 slice 1 278 0 0
280 uext 9 40 2
281 srl 9 257 280
282 slice 1 281 0 0
283 eq 1 279 282
284 and 1 276 283
285 ite 1 284 273 272
286 input 1
287 redor 1 257
288 not 1 287
289 redand 1 257
290 or 1 288 289
291 ite 1 290 286 285
292 input 1
293 xor 1 3 2
294 eq 1 293 18
295 xor 1 3 2
296 eq 1 295 12
297 or 1 294 296
298 ite 1 297 292 291
299 input 1
300 ite 1 64 299 298
301 input 1
302 ite 1 75 301 300
303 uext 9 36 2
304 srl 9 257 303
305 slice 1 304 0 0
306 ite 1 284 305 302
307 input 1
308 ite 1 290 307 306
309 input 1
310 ite 1 297 309 308
311 input 1
312 ite 1 64 311 310
313 input 1
314 ite 1 75 313 312
315 slice 1 7 12 12
316 ite 1 290 315 314
317 input 1
318 ite 1 297 317 316
319 input 1
320 ite 1 64 319 318
321 input 1
322 ite 1 75 321 320
323 uext 9 97 2
324 srl 9 257 323
325 slice 1 324 0 0
326 ite 1 297 325 322
327 input 1
328 ite 1 64 327 326
329 input 1
330 ite 1 75 329 328
331 concat 13 180 105
332 sort bitvec 3
333 concat 332 255 331
334 concat 9 330 333
335 concat 13 5 12
336 uext 9 335 2
337 srl 9 334 336
338 slice 1 337 0 0
339 eq 1 5 18
340 eq 1 5 12
341 or 1 339 340
342 uext 9 335 2
343 srl 9 334 342
344 slice 1 343 0 0
345 concat 13 5 18
346 uext 9 345 2
347 srl 9 334 346
348 slice 1 347 0 0
349 eq 1 344 348
350 and 1 341 349
351 ite 1 350 338 8
352 input 1
353 eq 1 4 18
354 eq 1 4 12
355 or 1 353 354
356 concat 13 12 4
357 uext 9 356 2
358 srl 9 334 357
359 slice 1 358 0 0
360 concat 13 18 4
361 uext 9 360 2
362 srl 9 334 361
363 slice 1 362 0 0
364 eq 1 359 363
365 and 1 355 364
366 ite 1 365 352 351
367 input 1
368 redor 1 334
369 not 1 368
370 redand 1 334
371 or 1 369 370
372 ite 1 371 367 366
373 input 1
374 xor 1 5 4
375 eq 1 374 18
376 xor 1 5 4
377 eq 1 376 12
378 or 1 375 377
379 ite 1 378 373 372
380 input 1
381 ite 1 64 380 379
382 input 1
383 ite 1 75 382 381
384 uext 9 356 2
385 srl 9 334 384
386 slice 1 385 0 0
387 ite 1 365 386 383
388 input 1
389 ite 1 371 388 387
390 input 1
391 ite 1 378 390 389
392 input 1
393 ite 1 64 392 391
394 input 1
395 ite 1 75 394 393
396 ite 1 371 105 395
397 input 1
398 ite 1 378 397 396
399 input 1
400 ite 1 64 399 398
401 input 1
402 ite 1 75 401 400
403 concat 13 5 4
404 uext 9 403 2
405 srl 9 334 404
406 slice 1 405 0 0
407 ite 1 378 406 402
408 input 1
409 ite 1 64 408 407
410 input 1
411 ite 1 75 410 409
412 ite 1 64 89 411
413 input 1
414 ite 1 75 413 412
415 concat 13 3 2
416 concat 332 4 415
417 concat 9 5 416
418 uext 6 417 12
419 srl 6 7 418
420 slice 1 419 0 0
421 ite 1 75 420 414
422 output 421 O ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:42.10-42.11
423 uext 6 7 0 INIT_REG ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:56.14-56.22
424 uext 1 421 0 O_out ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:61.7-61.12
425 input 1
426 uext 1 425 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
427 input 9
428 uext 9 427 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
429 input 13
430 uext 13 429 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
431 input 1
432 uext 1 431 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
433 input 9
434 uext 9 433 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
435 input 13
436 uext 13 435 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
437 input 1
438 uext 1 437 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
439 input 9
440 uext 9 439 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
441 input 13
442 uext 13 441 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
443 input 1
444 uext 1 443 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
445 input 9
446 uext 9 445 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
447 input 13
448 uext 13 447 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
449 input 1
450 uext 1 449 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
451 input 9
452 uext 9 451 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
453 input 13
454 uext 13 453 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
455 uext 1 12 0 trig_attr ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:53.7-53.16
; end of yosys output
here-string-delimiter
        ;
        ))

     (match-define (hash-table ("O" O)) outs)

     (match-define (hash-table ("I0" I0) ("I1" I1) ("I2" I2) ("I3" I3) ("INIT" INIT)) ins)
     (check-equal? (unsat) (verify (assert (bveq O (lut INIT (concat I3 I2 I1 I0)))))))))
