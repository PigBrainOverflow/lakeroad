{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "(require rosette\n",
    "         rosette/lib/synthax)\n",
    "         \n",
    "; number of bits which a LUT takes as input\n",
    "(define input-width 6)\n",
    "; number of bits which a LUT outputs\n",
    "(define output-width 2)\n",
    "\n",
    "; the LUT contains an `output-width`-sized entry for each of the possible `2^input-width` entries.\n",
    "(define-symbolic memory (bitvector (* output-width (expt 2 input-width))))\n",
    "(define-symbolic inputs (bitvector input-width))\n",
    "; The output of a LUT is simply the `output-width`-length bitvector at the entry pointed to by\n",
    "; `inputs-a`, when interpreted as an integer.\n",
    "(define \n",
    "  (lut output-width memory inputs) \n",
    "  (let* ((i (bitvector->integer inputs))\n",
    "         (low (* output-width i))\n",
    "         (high (+ (- output-width 1) low)))\n",
    "    (extract high low memory)))\n",
    "\n",
    "\n",
    "(define m (synthesize\n",
    "           #:forall (list inputs)\n",
    "           #:guarantee \n",
    "           (assert (bveq (bvand (bit 1 inputs) (bit 0 inputs))\n",
    "                         (bit 0 (lut output-width memory inputs))))))\n",
    "\n",
    "; lut has input width of 2, what's the value of memory that implements AND\n",
    "\n",
    "; cool first target: from 1. slice description and 2. highl evel program (e.g. add), find a \"clever\"\n",
    "; (i.e. using a mux) way to implement the program\n",
    "\n",
    "; another optimization: if you have an 8-bit x+1 circuit, xilinx tools can remove the carry chain to\n",
    "; make it 1 cycle faster\n",
    "\n",
    "; one way to think about it: software people started with structure, and now are being more free form\n",
    "; in their search. hardware people started with no structure and we are now trying to add structure\n",
    "; back in alex aiken talk is an example of sw people loosening structure adding structure helps guide\n",
    "; the search is this an artifact of old systems being so small? so they were much smaller and the\n",
    "; problem was easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<code>(unsat)</code>"
      ],
      "text/plain": [
       "(unsat)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Racket",
   "language": "racket",
   "name": "racket"
  },
  "language_info": {
   "codemirror_mode": "scheme",
   "file_extension": ".rkt",
   "mimetype": "text/x-racket",
   "name": "Racket",
   "pygments_lexer": "racket",
   "version": "8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
